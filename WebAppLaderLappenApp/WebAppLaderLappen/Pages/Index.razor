@page "/"

@inject IJSRuntime JS
@using WebAppLaderLappen.Data
@using System.Threading.Tasks;

@code {
    private PositionService positionService;
    private List<Position> positions = new List<Position>();
    private List<Position> oldPositions = new List<Position>();

    protected override async Task OnInitializedAsync()
    {
        positionService = new PositionService();

    }
    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeAsync<string>("createCanvas");
        }
        else
        {

        }
        try
        {
            await GetPos();
        }
        catch
        {

        }
    }

    private async Task GetPos()
    {
        while (true)
        {
            positions = await positionService.GetPositionsAsync();
            if (oldPositions.Count == positions.Count)
            {


            }
            else
            {
                oldPositions = await positionService.GetPositionsAsync();
                for (int i = 0; i < positions.Count; i++)
                {

                    try
                    {
                        await JS.InvokeAsync<string>("addMowerPos", positions[i].x / 100, positions[i].y / 100, positions[i].collision, positions[i].onLine);

                    }
                    catch
                    {

                    }
                }

            }

            await Task.Delay(1000);

        }
    }
}